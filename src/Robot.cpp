// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DrivePID> Robot::drivePID;
std::shared_ptr<Arm> Robot::arm;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Climb> Robot::climb;
std::shared_ptr<WaveCompressor> Robot::waveCompressor;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drivePID.reset(new DrivePID());
    arm.reset(new Arm());
    intake.reset(new Intake());
    climb.reset(new Climb());
    waveCompressor.reset(new WaveCompressor());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.AddDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	waveCompressor.get()->CompressorStop();
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
	waveCompressor.get()->CompressorStart();

}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
	waveCompressor.get()->CompressorStart();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	double righttrigger = oi.get()->getOperatorJS().get()->GetRawAxis(3);
	if (righttrigger > .7) {

	intake.get()->openIntakeClaw(true);

	}
	else {
	intake.get()->openIntakeClaw(false);

	}

	bool aButton = oi.get()->getOperatorJS().get()->GetRawButton(0);
	bool bButton = oi.get()->getOperatorJS().get()->GetRawButton(1);
	if ((aButton == true) and (bButton == false)) {
		intake.get()->setIntake(.5);
	}
	else if ((bButton == true) and (aButton == false)) {
		intake.get()->setIntake(-.5);
	}
	else {
		intake.get()->setIntake(0);
	}

	bool startButton = oi.get()->getOperatorJS().get()->GetRawButton(7);
	if (startButton == true) {
		climb.get()->launchGrapple(true);
	}
	else {
		climb.get()->launchGrapple(false);
	}

	bool leftButton = oi.get()->getDriver().get()->GetRawButton(4);
	bool rightButton = oi.get()->getDriver().get()->GetRawButton(5);
	if ((leftButton == true) and (rightButton == false)) {
		climb.get()->climbRobot(-.5);
	}
	else if ((leftButton == false) and (rightButton == true)) {
		climb.get()->climbRobot(.5);
	}
	else {
		climb.get()->climbRobot(0);
	}

}

START_ROBOT_CLASS(Robot);

