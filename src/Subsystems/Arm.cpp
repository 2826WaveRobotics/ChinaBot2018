// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Arm.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"

#define ARM_OFFSET 134

Arm::Arm() : PIDSubsystem("Arm", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(1);
    GetPIDController()->SetContinuous(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    arm1 = RobotMap::armArm1;
    armAngle = RobotMap::armArmAngle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    Disable();
    m_targetAngle = 0; // Set to the actual initial angle of the arm
}

double Arm::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
        return voltsToAngle(armAngle->GetVoltage());
    // Need to do math on this to get angle rather than sensor raw values
}

void Arm::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    moveArm(output);
}

void Arm::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Arm::SetAngle(double degrees) {
	if (m_targetAngle != degrees) {
		m_targetAngle = degrees;
		Disable();
		SetSetpoint(degrees);
		Enable();
	}
}


void Arm::PIDEnable() {
	Enable();
}

void Arm::PIDDisable() {
	Disable();
}

void Arm::moveArm(double eyeball) {
	//arm1->PIDWrite(eyeball);
	arm1->Set(eyeball);
}

double Arm::voltsToAngle(double volts) {
	return ((volts - .5) * (360 / 4)) + ARM_OFFSET;
}

double Arm::angleToVolts(double angle) {
	return ((angle - ARM_OFFSET) * (4 / 360)) + .5;
}

double Arm::getCurrentAngle() {
	return voltsToAngle(armAngle->GetVoltage());
}
