// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "DrivePID.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include <iostream>


#define PowerLimiter 0.7

namespace{
 const int c_CPR = 256; //counts per revolution for encoder
}

DrivePID::DrivePID() : PIDSubsystem("DrivePID", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(0.2);
    GetPIDController()->SetContinuous(false);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftEncoder = RobotMap::drivePIDLeftEncoder;
    rightEncoder = RobotMap::drivePIDRightEncoder;
    left1 = RobotMap::drivePIDLeft1;
    left2 = RobotMap::drivePIDLeft2;
    left3 = RobotMap::drivePIDLeft3;
    leftDriveGroup = RobotMap::drivePIDLeft;
    right1 = RobotMap::drivePIDRight1;
    right2 = RobotMap::drivePIDRight2;
    right3 = RobotMap::drivePIDRight3;
    rightDriveGroup = RobotMap::drivePIDRight;
    diffDrive = RobotMap::drivePIDDifferentialDrive1;

    gyro = new AHRS(SPI::Port::kMXP, 100);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}

double DrivePID::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return gyro->GetYaw();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void DrivePID::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	// Limiting output to 70% power

    rightDriveGroup->PIDWrite(output);
    leftDriveGroup->PIDWrite(output);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void DrivePID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DrivePID::TankDrive(double leftJS, double rightJS) {
	leftJS = -leftJS * PowerLimiter;
	rightJS = rightJS * PowerLimiter;

	diffDrive.get()->TankDrive(leftJS, rightJS);
}

void DrivePID::ArcadeDrive(double leftJS, double rightJS) {
	leftJS = -leftJS * PowerLimiter;
	rightJS = rightJS * PowerLimiter;

	diffDrive.get()->ArcadeDrive(leftJS, rightJS);

}

//Drive straight, manually applying correction
void DrivePID::DriveStraight(double power, double heading) {

	double yaw = GetYaw();
	SetDirection(heading);
	double correction = fabs(GetPIDOutput());
	bool direction;

	if(yaw > 0){
		if((heading < yaw)&& (heading > (-180 + yaw))){
			direction = 1; //Left
		}
		else{
			direction = 0;
		}
	}
	else if(yaw < 0){
		if((heading > yaw)&& (heading < (180 + yaw))){
			direction = 0; //Right
		}
		else{
			direction = 1;
		}
	}

	if((correction > 0.01) && (correction < 0.2)){
		correction = 0.2;
	}
	else if((correction > -0.2) && (correction < -0.01)){
		correction = -0.2;
	}

	std::cout << "Correction: " << correction << std::endl;

	if((power < 0) && (direction == 1)){
		TankDrive(power+correction, power);
	}
	else if((power < 0) && (direction == 0)){
		TankDrive(power, power+correction);
	}
	else if((power > 0) && (direction == 1)){
		TankDrive(power+correction, power);
	}
	else if((power > 0) && (direction == 0)){
		TankDrive(power, power+correction);
	}
	else{
		TankDrive(power, power);
	}

}

//Rotate, manually applying correction
void DrivePID::Rotate(double heading) {

	double yaw = GetYaw();
	SetDirection(heading);
	double correction = fabs(GetPIDOutput());
	bool direction;

	if(yaw > 0){
		if((heading < yaw)  && (heading > (-180 + yaw))){
			direction = 1; //Left
		}
		else{
			direction = 0;
		}
	}
	else if(yaw < 0){
		if((heading > yaw) && (heading < (180 + yaw))){
			direction = 0; //Right
		}
		else{
			direction = 1;
		}
	}

	if((correction > 0.01) && (correction < 0.2)){
		correction = 0.2;
	}
	else if((correction > -0.2) && (correction < -0.01)){
		correction = -0.2;
	}

	std::cout << "Correction: " << correction << "  Direction :  " << direction << std::endl;

	if(direction){
		std::cout << " LEFT " << std::endl;
		diffDrive.get()->TankDrive(correction, -correction, false);
	}
	else if(!direction){
		std::cout << " RIGHT " << std::endl;
		diffDrive.get()->TankDrive(-correction, correction, false);
	}
}

//Drive a distance within two inches
void DrivePID::DriveDistance(double distance, double power, double heading){
	//double yaw = GetYaw();
	SetDirection(heading+1);

	if(driveState == c_accelerate){
		DriveAccelerate(distance, power, heading);
	}
	else if(driveState == c_deaccelerate){
		DriveDeaccelerate(distance, power);
	}
	else{
		DriveStop(power);
	}
}

//Accelerate until stopping distance
void DrivePID::DriveAccelerate(double distance, double power, double heading){
	//TankDrive(power, power);
	DriveStraight(power, heading+1);
	double distanceDiff = fabs(fabs(GetDistance())-(fabs(distance)));

	double velocity = fabs(GetVelocity());
	double stoppingDist = velocity*1.35;

	std::cout << "Velocity: " << velocity << "   Distance Difference:  " << distanceDiff
			<< "  Stopping Distance:  " << stoppingDist << std::endl;

	if(distanceDiff <= stoppingDist){
		driveState = c_deaccelerate;
		std::cout << "  Change to Deaccelerate  " << std::endl;
	}
}

//Deaccelerate by coasting
void DrivePID::DriveDeaccelerate(double distance, double power){
	std::cout << "   Drive Deaccelerate   " << std::endl;
	TankDrive(0, 0);
	double velocity = fabs(GetVelocity());
	if(velocity < (10)){
		std::cout << "   Change to Drive Stop    " << std::endl;
		driveState = c_stop;
	}
}

//Apply power inverse to velocity to stop
void DrivePID::DriveStop(double distance){
	double velocity = GetVelocity();
	double inverseVelocity = 1/(GetVelocity()/2);
	std::cout << "   Drive Stop   " << " Inverse Velocity:  " << inverseVelocity << std::endl;

	if(velocity > 2){
		TankDrive(-inverseVelocity, -inverseVelocity);
	}
	else if(velocity < -2){
		TankDrive(-inverseVelocity, -inverseVelocity);
	}
	else{
		TankDrive(0, 0);
	}
}

//Return right encoder value
double DrivePID::GetRightEncoder() {
	//double encoderCount = (-1)*right1->GetSensorCollection().GetQuadraturePosition();
	double encoderCount = rightEncoder->Get();
	double distance = encoderCount/c_CPR*6.05*3.1415;

	return distance;
}

//Return left encoder value
double DrivePID::GetLeftEncoder() {
	//double encoderCount = left1->GetSensorCollection().GetQuadraturePosition();
	double encoderCount = leftEncoder->Get();
	double distance = encoderCount/c_CPR*6.05*3.1415;

	return distance;
}

//Zero drive encoders
void DrivePID::ZeroEncoders(){
	//Use this if the encoders are plugged into the Roborio
	rightEncoder->Reset();
	leftEncoder->Reset();

	//Use this if the encoders are plugged into the talons
//	right1->GetSensorCollection().SetQuadraturePosition(0, 50);
//	left1->GetSensorCollection().SetQuadraturePosition(0, 50);
}

//Return distance traveled based on encoder values
double DrivePID::GetDistance(){
	double rightDist = GetRightEncoder()*(-1);
	double leftDist = GetLeftEncoder();
	double m_distanceTraveled;

	if(rightDist < 0 ){
		m_distanceTraveled =  (rightDist+leftDist)/2;
	}
	else if (rightDist > 0){
		m_distanceTraveled = ((rightDist+leftDist)/2)*(-1);
	}
	else{
		m_distanceTraveled = 0;
	}

	return m_distanceTraveled;
}

//Return velocity based on encoder rates
double DrivePID::GetVelocity(){
	double encoder_LRate = leftEncoder->GetRate(); //returns ticks / second
	double encoder_RRate = rightEncoder->GetRate()*(-1); // *-1 for comp bot
	double averageEncoderRate = (encoder_LRate + encoder_RRate) / 2;
	double velocity = averageEncoderRate*6.05/c_CPR; //turns ticks / second into inches / second
	return velocity;
}

void DrivePID::SetDirection(double heading){
	if(GetPIDController()->GetSetpoint() != heading)
		{
			GetPIDController()->Disable();
			GetPIDController()->Reset();

			GetPIDController()->SetSetpoint(heading); //we are now facing the same way the entire time
			GetPIDController()->Enable();
		}

}

double DrivePID::GetPIDOutput(){
	return GetPIDController()->Get();
}

//Return yaw from gyro
float DrivePID::GetYaw(){
	return gyro->GetYaw();
}

//Zero gyro yaw
void DrivePID::ZeroYaw(){
	gyro->ZeroYaw();
}

//Set PID values
void DrivePID::SetPIDs(double kP, double kI, double kD) {
	GetPIDController()->SetPID(kP, kI, kD);

}

/*
 *  Enable and disable functions - the PID
 *  Change UsePIDOutput to drive with differential drive member variable - all things together
 *  Add direct drive using differential drive  Hint: We want tank drive and arcade drive (DONE!)
 *  UsePIDInput convert encoder to distance
 *  In general: Come up with a list of things to do autonomously
 */
