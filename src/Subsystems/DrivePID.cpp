// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "DrivePID.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"

#define PowerLimiter 0.7

DrivePID::DrivePID() : PIDSubsystem("DrivePID", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(0.2);
    GetPIDController()->SetContinuous(false);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftEncoder = RobotMap::drivePIDLeftEncoder;
    rightEncoder = RobotMap::drivePIDRightEncoder;
    left1 = RobotMap::drivePIDLeft1;
    left2 = RobotMap::drivePIDLeft2;
    left3 = RobotMap::drivePIDLeft3;
    left = RobotMap::drivePIDLeft;
    right1 = RobotMap::drivePIDRight1;
    right2 = RobotMap::drivePIDRight2;
    right3 = RobotMap::drivePIDRight3;
    right = RobotMap::drivePIDRight;
    differentialDrive1 = RobotMap::drivePIDDifferentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}

double DrivePID::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return leftEncoder->PIDGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void DrivePID::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	// Limiting output to 70% power

	TankDrive(output, output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void DrivePID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DrivePID::TankDrive(double leftJS, double rightJS) {
	leftJS = -leftJS * PowerLimiter;
	rightJS = rightJS * PowerLimiter;

	differentialDrive1.get()->TankDrive(leftJS, rightJS);
}

void DrivePID::ArcadeDrive(double leftJS, double rightJS) {
	leftJS = -leftJS * PowerLimiter;
	rightJS = rightJS * PowerLimiter;

	differentialDrive1.get()->ArcadeDrive(leftJS, rightJS);

}

/*
 *  Enable and disable functions - the PID
 *  Change UsePIDOutput to drive with differential drive member variable - all things together
 *  Add direct drive using differential drive  Hint: We want tank drive and arcade drive (DONE!)
 *  UsePIDInput convert encoder to distance
 *  In general: Come up with a list of things to do autonomously
 */
